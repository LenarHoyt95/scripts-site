name: Build manifest

# üìÖ D√©clenchement : √† chaque push sur "main" ou manuellement
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ T√©l√©charger le contenu du d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Construire le manifest.json
      - name: Build manifest.json
        env:
          REPO: ${{ github.repository }}
          BRANCH: main
        run: |
          python - << 'PY'
          import os, json, subprocess

          REPO = os.environ["REPO"]
          BRANCH = os.environ.get("BRANCH", "main")

          base_raw = f"https://raw.githubusercontent.com/{REPO}/{BRANCH}/"
          base_blob = f"https://github.com/{REPO}/blob/{BRANCH}/"

          scripts_dir = "scripts"
          items = []

          if os.path.isdir(scripts_dir):
            for slug in sorted(os.listdir(scripts_dir)):
              d = os.path.join(scripts_dir, slug)
              if not os.path.isdir(d):
                continue

              meta_path = os.path.join(d, "meta.json")
              if not os.path.isfile(meta_path):
                print(f"[WARN] Aucun meta.json dans {slug}")
                continue

              try:
                with open(meta_path, "r", encoding="utf-8") as f:
                  meta = json.load(f)
              except Exception as e:
                print(f"[WARN] meta.json invalide dans {slug}: {e}")
                continue

              name = meta.get("name", slug)
              language = meta.get("language", "Autre")
              description = meta.get("description", "")
              entry = meta.get("entry")

              if not entry:
                print(f"[WARN] Pas d'entr√©e principale dans {slug}")
                continue

              entry_path = f"{scripts_dir}/{slug}/{entry}"
              if not os.path.isfile(entry_path):
                print(f"[WARN] Fichier {entry_path} introuvable")
                continue

              # Date du dernier commit
              try:
                dt = subprocess.check_output(
                  ["git", "log", "-1", "--format=%cI", "--", entry_path],
                  text=True
                ).strip()
              except Exception:
                dt = ""

              items.append({
                "slug": slug,
                "name": name,
                "language": language,
                "description": description,
                "entry": entry,
                "view_url": base_blob + entry_path,
                "download_url": base_raw + entry_path,
                "last_commit": dt
              })

          os.makedirs("docs", exist_ok=True)
          with open("docs/manifest.json", "w", encoding="utf-8") as f:
            json.dump({"items": items}, f, ensure_ascii=False, indent=2)

          print(f"‚úÖ {len(items)} scripts index√©s.")
          PY

      # 3Ô∏è‚É£ Pr√©parer les fichiers pour GitHub Pages (docs/)
      - name: Upload artifact (docs)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      # 4Ô∏è‚É£ D√©ploiement automatique vers GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
